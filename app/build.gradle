apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

// build properties
Properties properties = new Properties()
properties.load(project.file('build.properties').newDataInputStream())

def versionMajor = 0
def versionMinor = 1
def versionPatch = 1
def buildNumber = System.getenv("BUILD_NUMBER") as Integer ?: 0

Integer codeVersion = versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + buildNumber
String nameVersion = "${versionMajor}.${versionMinor}.${versionPatch}"

android {
    compileSdkVersion 27
    flavorDimensions "default"

    dexOptions {
        jumboMode = true
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        defaultPublishConfig 'debug'
        applicationId "ru.z13.imgtags"
        minSdkVersion 18
        targetSdkVersion 27
        testInstrumentationRunner "${applicationId}.runner.RxAndroidJUnitRunner"
        versionCode codeVersion
        versionName nameVersion
        buildConfigField "int", "BUILD_NUMBER", buildNumber.toString()
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        debug {
            storeFile file(properties.getProperty('sign_store_path').toString())
            storePassword properties.getProperty('sign_store_password').toString()
            keyAlias properties.getProperty('sign_key_debug_alias').toString()
            keyPassword properties.getProperty('sign_key_debug_password').toString()
        }

        release {
            storeFile file(properties.getProperty('sign_store_path').toString())
            storePassword properties.getProperty('sign_store_password').toString()
            keyAlias properties.getProperty('sign_key_alias').toString()
            keyPassword properties.getProperty('sign_key_password').toString()
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            // Disable fabric build ID generation for debug builds
            ext.enableCrashlytics = false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }

    productFlavors {
        production {
            manifestPlaceholders = [
                    appName: "ImgTags"
            ]

        }
        develop {
            applicationIdSuffix ".develop"
            versionNameSuffix "-develop"
            manifestPlaceholders = [
                    appName: "ImgTags Dev"
            ]
        }
    }

    sourceSets {
        def commonTestDir = 'src/commonTest/java'
        test {
            java.srcDir commonTestDir
        }
        androidTest {
            java.srcDir commonTestDir
        }
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
        exclude 'META-INF/license/LICENSE.base64.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/MANIFEST.MF'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
        }
    }
}

android.applicationVariants.all { variant ->
    variant.outputs.all { output ->
        def appName
        if (project.hasProperty("applicationName")) {
            appName = applicationName
        } else {
            appName = parent.name
        }

        def outputFile = output.outputFile
        if (outputFile != null && outputFile.name.endsWith('.apk')) {

            outputFileName = "${appName}-${variant.name}-${variant.versionName}.apk"
        }
    }
}

configurations.all {
    resolutionStrategy {
        force 'com.squareup.okio:okio:1.11.0'
        force "com.squareup.okhttp3:okhttp:3.5.0"
        force "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    }

    exclude group: 'com.android.support', module: 'support-v13'
}

apply from: 'dependencies.gradle'

dependencies {
    implementation supportLibs
    implementation rxJavaLibs
    implementation moxyLibs
    implementation ciceroneLibs

    implementation 'com.android.support:multidex:1.0.3'

    implementation 'com.github.bumptech.glide:glide:4.7.1'
    kapt 'com.github.bumptech.glide:compiler:4.7.1'

    implementation "com.jakewharton.timber:timber:4.7.1"
    implementation "com.facebook.stetho:stetho-okhttp3:1.5.0"

    implementation "com.google.dagger:dagger:$versions.dagger"
    compileOnly 'org.glassfish:javax.annotation:10.0-b28' //Required by Dagger2

    debugImplementation leakCannary
    releaseImplementation leakCannary
    testImplementation leakCannary

    // APT dependencies
    kapt daggerCompiler
    kapt roomCompiler
    kaptTest daggerCompiler
    kaptAndroidTest daggerCompiler
    kapt moxyCompiler

    testImplementation unitTestLibs
    androidTestImplementation androidTestsLibs

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
}

kapt {
    generateStubs = true
}

// Log out test results to console
tasks.matching { it instanceof Test }.all {
    testLogging.events = ["failed", "passed", "skipped"]
}